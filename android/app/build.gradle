plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def pubspecFile = new File(project.projectDir.parentFile.parentFile, 'pubspec.yaml')
def versionJsonFile = new File(project.projectDir.parentFile.parentFile, 'version.json')
def changelogFile = new File(project.projectDir.parentFile.parentFile, 'CHANGELOG.md')

task updateVersionJson {
    doLast {
        def pubspecContent = pubspecFile.text
        def versionMatch = pubspecContent =~ /version:\s*([0-9]+\.[0-9]+\.[0-9]+)/
        
        if (!versionMatch.find()) {
            throw new GradleException("Could not find version in pubspec.yaml")
        }
        
        def version = versionMatch.group(1)
        def jsonContent = versionJsonFile.text
        def jsonSlurper = new groovy.json.JsonSlurper()
        def json = jsonSlurper.parseText(jsonContent)
        
        json.version = version
        json.url = "https://github.com/Spark-NV/Lumina/releases/download/v${version}/Lumina.apk"
        
        if (changelogFile.exists()) {
            def changelog = changelogFile.text
            def versionSection = changelog =~ /(?s)##\s*${version}\s*\[[^\]]+\]\s*\n(.*?)(?=\n##|$)/
            
            if (versionSection.find()) {
                def notes = versionSection.group(1).trim()
                println "Found version section:\n$notes"
                
                def processedNotes = new StringBuilder()
                def sections = notes.split(/(?=###\s+\w+)/)
                
                sections.each { section ->
                    println "Processing section:\n$section"
                    def sectionMatch = section =~ /(?s)###\s+(\w+)\s*\n(.*?)(?=\n###|$)/
                    if (sectionMatch.find()) {
                        def sectionTitle = sectionMatch.group(1)
                        def sectionContent = sectionMatch.group(2)
                        
                        println "Section title: $sectionTitle"
                        println "Section content:\n$sectionContent"
                        
                        processedNotes.append("${sectionTitle}:\\n")
                        
                        def lastLine = true
                        def contentLines = sectionContent.trim().split('\n')
                        contentLines.eachWithIndex { line, index ->
                            def trimmedLine = line.trim()
                            if (trimmedLine && trimmedLine.startsWith('-')) {
                                processedNotes.append(" ${trimmedLine}")
                                if (index < contentLines.size() - 1) {
                                    processedNotes.append("\\n")
                                }
                            } else if (trimmedLine && trimmedLine.startsWith('  -')) {
                                processedNotes.append("   ${trimmedLine.substring(2)}")
                                if (index < contentLines.size() - 1) {
                                    processedNotes.append("\\n")
                                }
                            }
                        }
                        
                        if (section != sections.last()) {
                            processedNotes.append("\\n\\n")
                        }
                    }
                }
                
                def finalNotes = processedNotes.toString().trim()
                println "Final processed notes:\n$finalNotes"
                json.notes = finalNotes
            } else {
                println "Warning: Could not find notes for version $version in CHANGELOG.md"
                json.notes = "What's new in version $version\\n - No detailed notes available"
            }
        }
        
        def jsonBuilder = new groovy.json.JsonBuilder(json)
        def prettyJson = groovy.json.JsonOutput.prettyPrint(jsonBuilder.toString())
        prettyJson = prettyJson.replaceAll('\\\\n', '\\n')
        versionJsonFile.text = prettyJson
        
        println "Updated version.json with version ${version} and changelog notes"
    }
}

android {
    namespace = "com.example.lumina"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    aaptOptions {  
        cruncherEnabled = false  
    }
    
    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.lumina"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 24
        targetSdk = 34
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        release {
            def keystoreProperties = new Properties()
            def keystorePropertiesFile = rootProject.file('key.properties')
            if (keystorePropertiesFile.exists()) {
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                println "Release build: Loading keystore from " + keystoreProperties['storeFile']

                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            } else {
                println "Warning: key.properties not found, using debug signing"
                storeFile = null
            }
        }
    }

    buildTypes {
        release {
            if (signingConfigs.release.storeFile != null) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            if (project.gradle.startParameter.taskNames.any { it.contains('Release') || it.contains('release') }) {
                preBuild.dependsOn updateVersionJson
            }
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}
