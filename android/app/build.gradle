plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def pubspecFile = new File(project.projectDir.parentFile.parentFile, 'pubspec.yaml')
def versionJsonFile = new File(project.projectDir.parentFile.parentFile, 'version.json')
def changelogFile = new File(project.projectDir.parentFile.parentFile, 'CHANGELOG.md')

// Set to true to always use the latest version from changelog instead of pubspec
def useLatestChangelogVersion = true

// Control whether to update pubspec.yaml with the latest version from changelog
def updatePubspecWithLatestVersion = true

task updateVersionJson {
    doLast {
        def version
        def shouldUpdatePubspec = false
        
        def pubspecContent = pubspecFile.text
        def pubspecVersionMatch = pubspecContent =~ /version:\s*([0-9]+\.[0-9]+\.[0-9]+)/
        
        if (!pubspecVersionMatch.find()) {
            throw new GradleException("Could not find version in pubspec.yaml")
        }
        
        def pubspecVersion = pubspecVersionMatch.group(1)
        println "Version from pubspec.yaml: $pubspecVersion"
        
        if (useLatestChangelogVersion && changelogFile.exists()) {
            def changelog = changelogFile.text
            def latestVersionMatch = changelog =~ /##\s+([0-9]+\.[0-9]+\.[0-9]+)\s+\[[^\]]+\]/
            
            if (latestVersionMatch.find()) {
                def latestVersion = latestVersionMatch.group(1)
                println "Latest version from CHANGELOG.md: $latestVersion"
                
                def pubspecParts = pubspecVersion.tokenize('.')
                def latestParts = latestVersion.tokenize('.')
                
                def useLatest = false
                for (int i = 0; i < Math.min(pubspecParts.size(), latestParts.size()); i++) {
                    int pubPart = pubspecParts[i].toInteger()
                    int latestPart = latestParts[i].toInteger()
                    
                    if (latestPart > pubPart) {
                        useLatest = true
                        break
                    } else if (pubPart > latestPart) {
                        break
                    }
                }
                
                if (useLatest) {
                    version = latestVersion
                    println "Using latest version from changelog: $version (newer than pubspec version)"
                    
                    if (updatePubspecWithLatestVersion) {
                        shouldUpdatePubspec = true
                    }
                } else {
                    version = pubspecVersion
                    println "Using version from pubspec.yaml: $version (newer or equal to changelog version)"
                }
            } else {
                version = pubspecVersion
                println "No version found in changelog, using pubspec version: $version"
            }
        } else {
            version = pubspecVersion
            println "Using version from pubspec.yaml: $version"
        }
        
        // Update pubspec.yaml if needed
        if (shouldUpdatePubspec) {
            println "Updating pubspec.yaml with version $version from changelog"
            def updatedPubspecContent = pubspecContent.replaceFirst(/version:\s*[0-9]+\.[0-9]+\.[0-9]+/, "version: $version")
            pubspecFile.text = updatedPubspecContent
            println "Successfully updated pubspec.yaml with version $version"
        }
        
        def jsonContent = versionJsonFile.text
        def jsonSlurper = new groovy.json.JsonSlurper()
        def json = jsonSlurper.parseText(jsonContent)
        
        json.version = version
        json.url = "https://github.com/Spark-NV/Lumina/releases/download/v${version}/Lumina.apk"
        
        if (changelogFile.exists()) {
            def changelog = changelogFile.text
            def versionPattern = "## ${version} \\[[^\\]]+\\]"
            def versionSectionPattern = "(?s)${versionPattern}\\s*\\n(.*?)(?=\\n##|\\Z)"
            
            def versionSection = changelog =~ versionSectionPattern
            
            if (versionSection.find()) {
                def notes = versionSection.group(1).trim()
                println "Found version section for ${version}:\n$notes"
                
                def processedNotes = new StringBuilder()
                def sections = notes.split(/(?=###\s+\w+)/)
                
                sections.each { section ->
                    def sectionMatch = section =~ /(?s)###\s+(\w+)\s*\n(.*?)(?=\n###|$)/
                    if (sectionMatch.find()) {
                        def sectionTitle = sectionMatch.group(1)
                        def sectionContent = sectionMatch.group(2).trim()
                        
                        println "Section title: $sectionTitle"
                        println "Section content:\n$sectionContent"
                        
                        processedNotes.append("${sectionTitle}:\\n")
                        
                        def contentLines = sectionContent.split('\n')
                        contentLines.eachWithIndex { line, index ->
                            def trimmedLine = line.trim()
                            if (trimmedLine && trimmedLine.startsWith('-')) {
                                processedNotes.append(" ${trimmedLine}")
                                if (index < contentLines.size() - 1) {
                                    processedNotes.append("\\n")
                                }
                            } else if (trimmedLine && trimmedLine.startsWith('  -')) {
                                processedNotes.append("   ${trimmedLine.substring(2).trim()}")
                                if (index < contentLines.size() - 1) {
                                    processedNotes.append("\\n")
                                }
                            }
                        }
                        
                        if (section != sections.last()) {
                            processedNotes.append("\\n\\n")
                        }
                    }
                }
                
                def finalNotes = processedNotes.toString().trim()
                println "Final processed notes for version ${version}:\n$finalNotes"
                json.notes = finalNotes
            } else {
                println "Warning: Could not find notes for version $version in CHANGELOG.md"
                json.notes = "What's new in version $version\\n - No detailed notes available"
            }
        }
        
        def jsonBuilder = new groovy.json.JsonBuilder(json)
        def prettyJson = groovy.json.JsonOutput.prettyPrint(jsonBuilder.toString())
        prettyJson = prettyJson.replaceAll('\\\\n', '\\n')
        versionJsonFile.text = prettyJson
        
        println "Updated version.json with version ${version} and changelog notes"
    }
}

android {
    namespace = "com.example.lumina"
    compileSdk = 35
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    aaptOptions {  
        cruncherEnabled = false  
    }
    
    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.lumina"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 24
        targetSdk = 35
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        release {
            def keystoreProperties = new Properties()
            def externalKeystoreDir = new File('E:/Android-Release-Keys')
            def keystorePropertiesFile = new File(externalKeystoreDir, 'key.properties')
            if (keystorePropertiesFile.exists()) {
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                println "Release build: Loading keystore from external directory: " + keystoreProperties['storeFile']
                
                def keyStoreFile = new File(keystoreProperties['storeFile'])
                if (!keyStoreFile.isAbsolute()) {
                    keyStoreFile = new File(externalKeystoreDir, keystoreProperties['storeFile'])
                }
                
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keyStoreFile
                storePassword keystoreProperties['storePassword']
            } else {
                println "Warning: key.properties not found at E:/Android-Release-Keys, using debug signing"
                storeFile = null
            }
        }
    }

    buildTypes {
        release {
            if (signingConfigs.release.storeFile != null) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            preBuild.dependsOn updateVersionJson
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}
